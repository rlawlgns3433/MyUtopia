//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputAction/WorldMapMove.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @WorldMapMove: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @WorldMapMove()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""WorldMapMove"",
    ""maps"": [
        {
            ""name"": ""WorldMap"",
            ""id"": ""e52319c2-77ca-43bd-a714-a6ffe7834bb6"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""6e0d845c-d182-464b-af7e-dc9fd61c2ecd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Drag"",
                    ""type"": ""Button"",
                    ""id"": ""f8759e0f-65e4-4942-a112-3a611baea53b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touch"",
                    ""type"": ""Button"",
                    ""id"": ""9b3140ea-c81b-4ab6-9ede-1b9c334fd012"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aa8fcc74-14cb-4955-9c02-1c973430df7e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18b19355-e26c-450a-ab27-469cb76df923"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6020473f-b610-4952-aa24-2c585515ad72"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6cbd1d9-299e-47f0-a17e-f6ab5ee915d6"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""591599d6-2755-4d1e-b4b3-a2b03123ee99"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a72df9a6-c2d6-416e-918e-76d1871b0333"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // WorldMap
        m_WorldMap = asset.FindActionMap("WorldMap", throwIfNotFound: true);
        m_WorldMap_Move = m_WorldMap.FindAction("Move", throwIfNotFound: true);
        m_WorldMap_Drag = m_WorldMap.FindAction("Drag", throwIfNotFound: true);
        m_WorldMap_Touch = m_WorldMap.FindAction("Touch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // WorldMap
    private readonly InputActionMap m_WorldMap;
    private List<IWorldMapActions> m_WorldMapActionsCallbackInterfaces = new List<IWorldMapActions>();
    private readonly InputAction m_WorldMap_Move;
    private readonly InputAction m_WorldMap_Drag;
    private readonly InputAction m_WorldMap_Touch;
    public struct WorldMapActions
    {
        private @WorldMapMove m_Wrapper;
        public WorldMapActions(@WorldMapMove wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_WorldMap_Move;
        public InputAction @Drag => m_Wrapper.m_WorldMap_Drag;
        public InputAction @Touch => m_Wrapper.m_WorldMap_Touch;
        public InputActionMap Get() { return m_Wrapper.m_WorldMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorldMapActions set) { return set.Get(); }
        public void AddCallbacks(IWorldMapActions instance)
        {
            if (instance == null || m_Wrapper.m_WorldMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WorldMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Drag.started += instance.OnDrag;
            @Drag.performed += instance.OnDrag;
            @Drag.canceled += instance.OnDrag;
            @Touch.started += instance.OnTouch;
            @Touch.performed += instance.OnTouch;
            @Touch.canceled += instance.OnTouch;
        }

        private void UnregisterCallbacks(IWorldMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Drag.started -= instance.OnDrag;
            @Drag.performed -= instance.OnDrag;
            @Drag.canceled -= instance.OnDrag;
            @Touch.started -= instance.OnTouch;
            @Touch.performed -= instance.OnTouch;
            @Touch.canceled -= instance.OnTouch;
        }

        public void RemoveCallbacks(IWorldMapActions instance)
        {
            if (m_Wrapper.m_WorldMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWorldMapActions instance)
        {
            foreach (var item in m_Wrapper.m_WorldMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WorldMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WorldMapActions @WorldMap => new WorldMapActions(this);
    public interface IWorldMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnDrag(InputAction.CallbackContext context);
        void OnTouch(InputAction.CallbackContext context);
    }
}
